package entidad;

import java.awt.Image;

import pantallaInicio.Controlador;

public class GestorJugador {
	MovimientoJugador movimientojugador = new MovimientoJugador();
	MovimientoJugador2 movimientoJugador2 = new MovimientoJugador2();
	private int tiempoRestante = 1;
	public boolean acabada = false;
	public int areaefectividad = 160; // distancia entre jugadores para que el daño sea efectivo
	public int areaefectividady = 160; // distancia entre jugadores para que el daño sea efectivo
	GestorJugador(Jugador2 jugador2,Jugador1 jugador,Thread hiloPartida){
		if (esEfectivo()) {
			if (movimientojugador.atacar) {
				jugador.atacar(jugador2);
				movimientojugador.atacar = false; // reiniciar el ataque para evitar múltiples ataques continuos
			}
			// Condición para que el jugador 2 ataque al jugador 1
			if (movimientoJugador2.atacar) {
				jugador2.atacar(jugador);
				movimientoJugador2.atacar = false;
			}
			if (movimientojugador.patada) {
				jugador.atacar(jugador2);
				movimientojugador.patada = false; // reiniciar el ataque para evitar múltiples ataques continuos
			}
			if (movimientoJugador2.patada) {
				jugador.atacar(jugador);
				movimientoJugador2.patada = false; // reiniciar el ataque para evitar múltiples ataques continuos
			}
		}
		jugador.setDefendiendo(movimientojugador.defensa);
		jugador2.setDefendiendo(movimientoJugador2.defensa);
		if (jugador.getSaludActual() == 0 || jugador2.getSaludActual() == 0 || tiempoRestante <= 0) {
			acabada = true;
			hiloPartida = null;
			Controlador.getInstance().cambiarPantalla("SeleccionCaracteres");

			System.out.println(
					"Partida terminada, tengo que pasar frame a un frame donde ponga Congratulations al ganador y luego volver al inicio");
		}
	}
	public boolean esEfectivo() {
		areaefectividad = Math.abs(jugador.getX() - jugador2.getX());
		areaefectividady = Math.abs(jugador.getY() - jugador2.getY());
		if (areaefectividad <= 160 && areaefectividady == 0) {
			return true;
		}
		return false;
	}

	public boolean estanColisionando(Jugador1 jugador1, Jugador2 jugador2) {
		return jugador1.getX() < jugador2.getX() + jugador2.getanchuraJugador()
				&& jugador1.getX() + jugador1.getanchuraJugador() > jugador2.getX()
				&& jugador1.getY() < jugador2.getY() + jugador2.getalturaJugador()
				&& jugador1.getY() + jugador1.getalturaJugador() > jugador2.getY();
	}

	public boolean partidaAcabada() {
		return acabada;
	}

	public int getPanelHeight() {
		return this.getHeight();
	}

	public int getPanelWidth() {
		return this.getWidth();
	}

}
