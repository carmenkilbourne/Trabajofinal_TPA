package entidad;

import java.awt.Image;

import pantallaInicio.Controlador;

public class GestorJugador {
    private Jugador1 jugador1;
    private Jugador2 jugador2;
    MovimientoJugador movimientojugador = new MovimientoJugador();
    MovimientoJugador2 movimientoJugador2 = new MovimientoJugador2();
    private int areaEfectividad = 160;

    public GestorJugador(Jugador1 jugador1, Jugador2 jugador2) {
        this.jugador1 = jugador1;
        this.jugador2 = jugador2;
    }

    public void actualizarJuego() {

		if (esEfectivo()) {
			if (movimientojugador.atacar) {
				jugador1.atacar(jugador2);
				movimientojugador.atacar = false; // reiniciar el ataque para evitar múltiples ataques continuos
			}
			// Condición para que el jugador 2 ataque al jugador 1
			if (movimientoJugador2.atacar) {
				jugador2.atacar(jugador1);
				movimientoJugador2.atacar = false;
			}
			if (movimientojugador.patada) {
				jugador1.atacar(jugador2);
				movimientojugador.patada = false; // reiniciar el ataque para evitar múltiples ataques continuos
			}
			if (movimientoJugador2.patada) {
				jugador1.atacar(jugador1);
				movimientoJugador2.patada = false; // reiniciar el ataque para evitar múltiples ataques continuos
			}
		}
		jugador1.setDefendiendo(movimientojugador.defensa);
		jugador2.setDefendiendo(movimientoJugador2.defensa);
		partidaAcabada();
    }

    public boolean esEfectivo() {
        int distX = Math.abs(jugador1.getX() - jugador2.getX());
        int distY = Math.abs(jugador1.getY() - jugador2.getY());
        return distX <= areaEfectividad && distY == 0;
    }

    public boolean partidaAcabada() {	//metodo que devuelve true si la partida ha acabado
        return jugador1.getSaludActual() == 0 || jugador2.getSaludActual() == 0;
    }
}

